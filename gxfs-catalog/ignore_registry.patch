diff --git a/fc-service-core/src/main/java/eu/gaiax/difs/fc/core/service/verification/impl/VerificationServiceImpl.java b/fc-service-core/src/main/java/eu/gaiax/difs/fc/core/service/verification/impl/VerificationServiceImpl.java
index 6daa65be..9945eae5 100644
--- a/fc-service-core/src/main/java/eu/gaiax/difs/fc/core/service/verification/impl/VerificationServiceImpl.java
+++ b/fc-service-core/src/main/java/eu/gaiax/difs/fc/core/service/verification/impl/VerificationServiceImpl.java
@@ -70,6 +70,10 @@ import org.apache.jena.riot.system.stream.StreamManager;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
 
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLSession;
+
 import static org.apache.jena.rdf.model.ResourceFactory.*;
 
 
@@ -583,6 +587,9 @@ public class VerificationServiceImpl implements VerificationService {
       throw new VerificationException("Signatures error; Unknown Verification Method: " + uri);
     }
 
+    HttpsURLConnection.setDefaultHostnameVerifier(
+            WhitelistHostnameVerifier.INSTANCE); // ignore SSL certs for localhost
+
     DIDDocument diDoc = readDIDfromURI(uri);
     log.debug("getVerifiedVerifier; methods: {}", diDoc.getVerificationMethods());
     List<Map<String, Object>> available_jwks = (List<Map<String, Object>>) diDoc.toMap().get("verificationMethod");
@@ -618,14 +625,11 @@ public class VerificationServiceImpl implements VerificationService {
     String[] uri_parts = uri.getSchemeSpecificPart().split(":");
     String did_json;
     if (uri_parts[0].equals("web")) {
-      String[] _parts = uri_parts[1].split("#");
-      URL url;
-      if (_parts.length == 1) {
-        url = new URL("https://" + _parts[0] + "/.well-known/did.json");
-      } else {
-        url = new URL("https://" + _parts[0] + "/.well-known/did.json#" + _parts[1]);
-      }
-      log.debug("readDIDFromURI; requesting DIDDocument from: {}", url.toString());
+      String didWeb = uri.toString()
+              .replace("did:web:", "") // remove did type prefix
+              .replaceFirst("#.*", ""); // remove verification method reference
+      URL url = new URL(getDidDocumentUri(didWeb));
+      log.debug("readDIDFromURI; requesting DIDDocument from: {}", url);
       InputStream stream = url.openStream();
       did_json = IOUtils.toString(stream, StandardCharsets.UTF_8);
     } else {
@@ -636,6 +640,26 @@ public class VerificationServiceImpl implements VerificationService {
     return result;
   }
 
+  private static String getDidDocumentUri(String didWeb) {
+    boolean containsSubpath = didWeb.contains(":");
+    StringBuilder didDocumentUriBuilder = new StringBuilder();
+    didDocumentUriBuilder.append(didWeb
+            .replace(":", "/") // Replace ":" with "/" in the method specific identifier to
+            // obtain the fully qualified domain name and optional path.
+            .replace("%3A", ":")); // If the domain contains a port percent decode the colon.
+
+    // Generate an HTTPS URL to the expected location of the DID document by prepending https://.
+    didDocumentUriBuilder.insert(0, "https://");
+    if (!containsSubpath) {
+      // If no path has been specified in the URL, append /.well-known.
+      didDocumentUriBuilder.append("/.well-known");
+    }
+    // Append /did.json to complete the URL.
+    didDocumentUriBuilder.append("/did.json");
+
+    return didDocumentUriBuilder.toString();
+  }
+
   private Map<String, Object> extractRelevantVerificationMethod(List<Map<String, Object>> methods, URI verificationMethodURI) {
     //TODO wait for answer https://gitlab.com/gaia-x/lab/compliance/gx-compliance/-/issues/22
     log.debug("extractRelevantVerificationMethod; methods: {}, uri: {}", methods, verificationMethodURI);
@@ -695,10 +719,6 @@ public class VerificationServiceImpl implements VerificationService {
     //Second, extract required information
     Instant exp = relevant.getNotAfter().toInstant();
 
-    if (!checkTrustAnchor(uri)) {
-      throw new VerificationException("Signatures error; The trust anchor is not set in the registry. URI: " + uri);
-    }
-
     log.debug("hasPEMTrustAnchorAndIsNotDeprecated.exit; returning: {}", exp);
     return exp;
   }
@@ -971,3 +991,27 @@ public class VerificationServiceImpl implements VerificationService {
   }
 
 }
+
+enum WhitelistHostnameVerifier implements HostnameVerifier {
+  // these hosts get whitelisted
+  INSTANCE("localhost");
+
+  private Set whitelist = new HashSet<>();
+  private HostnameVerifier defaultHostnameVerifier =
+          HttpsURLConnection.getDefaultHostnameVerifier();
+
+  WhitelistHostnameVerifier(String... hostnames) {
+    for (String hostname : hostnames) {
+      whitelist.add(hostname);
+    }
+  }
+
+  @Override
+  public boolean verify(String host, SSLSession session) {
+    if (whitelist.contains(host)) {
+      return true;
+    }
+    // important: use default verifier for all other hosts
+    return defaultHostnameVerifier.verify(host, session);
+  }
+}
