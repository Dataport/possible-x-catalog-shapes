#  Copyright 2023-2024 Dataport AÃ¶R
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
index d28cceb3..4cfd1e69 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
@@ -7,6 +7,9 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.net.URI;
 import java.nio.charset.StandardCharsets;
+import java.security.KeyManagementException;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -24,10 +27,19 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
+import org.apache.hc.client5.http.impl.classic.HttpClients;
+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
+import org.apache.hc.client5.http.ssl.NoopHostnameVerifier;
+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;
+import org.apache.hc.client5.http.ssl.TrustAllStrategy;
+import org.apache.hc.core5.ssl.SSLContextBuilder;
 import org.apache.jena.riot.system.stream.StreamManager;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.http.ResponseEntity;
 import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 import org.springframework.stereotype.Component;
@@ -66,6 +78,11 @@ import info.weboftrust.ldsignatures.LdProof;
 import jakarta.annotation.PostConstruct;
 import lombok.extern.slf4j.Slf4j;
 
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
 
 /**
  * Implementation of the {@link VerificationService} interface.
@@ -121,20 +138,14 @@ public class VerificationServiceImpl implements VerificationService {
 
   private static final int HTTP_TIMEOUT = 5*1000; 
 
-  private RestTemplate rest;
+  private final RestTemplate rest;
   private boolean loadersInitialised;
   private StreamManager streamManager;
 
-  public VerificationServiceImpl() {
-    rest = restTemplate();
+  public VerificationServiceImpl(@Autowired @Qualifier("customRestTemplate") RestTemplate rest) {
+    this.rest = rest;
   }
 
-  private RestTemplate restTemplate() {
-    HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
-    factory.setConnectTimeout(HTTP_TIMEOUT);
-    factory.setConnectionRequestTimeout(HTTP_TIMEOUT);
-    return new RestTemplate(factory); 
-  }
   
   @PostConstruct
   private void initializeTrustFrameworkBaseClasses() {
@@ -648,9 +659,11 @@ public class VerificationServiceImpl implements VerificationService {
     }
 
     try {
-      ResponseEntity<Map> resp = rest.postForEntity(trustAnchorAddr, Map.of("uri", uri), Map.class);
-      if (!resp.getStatusCode().is2xxSuccessful()) {
-        log.info("hasPEMTrustAnchorAndIsNotExpired; Trust anchor is not set in the registry. URI: {}", uri);
+      if (trustAnchorAddr != null && !trustAnchorAddr.isBlank()) {
+        ResponseEntity<Map> resp = rest.postForEntity(trustAnchorAddr, Map.of("uri", uri), Map.class);
+        if (!resp.getStatusCode().is2xxSuccessful()) {
+          log.info("hasPEMTrustAnchorAndIsNotExpired; Trust anchor is not set in the registry. URI: {}", uri);
+        }
       }
     } catch (Exception ex) {
       log.warn("hasPEMTrustAnchorAndIsNotExpired; trust anchor error: {}", ex.getMessage());
@@ -832,3 +845,66 @@ public class VerificationServiceImpl implements VerificationService {
   }
 
 }
+
+@Configuration
+@Slf4j
+class SSLConfig {
+  /**
+   * Disables the SSL certificate checking for new instances of {@link HttpsURLConnection} This has been created to
+   * aid testing on a local box, not for use on production.
+   */
+  private final boolean ignoreSsl;
+  private static final int HTTP_TIMEOUT = 5*1000; //5sec
+  public SSLConfig(@Value("${federated-catalogue.ignore-ssl:false}") boolean ignoreSsl) {
+    this.ignoreSsl = ignoreSsl;
+    if (ignoreSsl) {
+      disableSSLCertificateChecking();
+      log.info("Disabling SSL verification for web requests.");
+    }
+  }
+  @Bean("customRestTemplate")
+  public RestTemplate restTemplate() throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
+    HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
+    factory.setConnectTimeout(HTTP_TIMEOUT);
+    factory.setConnectionRequestTimeout(HTTP_TIMEOUT);
+    if (ignoreSsl) {
+      CloseableHttpClient httpclient = HttpClients.custom()
+              .setConnectionManager(PoolingHttpClientConnectionManagerBuilder.create()
+                      .setSSLSocketFactory(SSLConnectionSocketFactoryBuilder.create()
+                              .setSslContext(SSLContextBuilder.create()
+                                      .loadTrustMaterial(TrustAllStrategy.INSTANCE)
+                                      .build())
+                              .setHostnameVerifier(NoopHostnameVerifier.INSTANCE)
+                              .build())
+                      .build())
+              .build();
+      factory.setHttpClient(httpclient);
+    }
+    return new RestTemplate(factory);
+  }
+  private static void disableSSLCertificateChecking() {
+    TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
+      public X509Certificate[] getAcceptedIssuers() {
+        return null;
+      }
+      @Override
+      public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
+        // Not implemented
+      }
+      @Override
+      public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
+        // Not implemented
+      }
+    }};
+    try {
+      SSLContext sc = SSLContext.getInstance("TLS");
+      sc.init(null, trustAllCerts, new java.security.SecureRandom());
+      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
+      HttpsURLConnection.setDefaultHostnameVerifier((hostname, sslSession) -> true);
+    } catch (KeyManagementException e) {
+      e.printStackTrace();
+    } catch (NoSuchAlgorithmException e) {
+      e.printStackTrace();
+    }
+  }
+}
\ No newline at end of file
