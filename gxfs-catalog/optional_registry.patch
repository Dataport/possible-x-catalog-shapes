diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
index 766d17f4..01e1043f 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/VerificationServiceImpl.java
@@ -8,8 +8,7 @@ import java.io.InputStream;
 import java.net.URI;
 import java.net.URL;
 import java.nio.charset.StandardCharsets;
-import java.security.GeneralSecurityException;
-import java.security.Security;
+import java.security.*;
 import java.security.cert.CertificateException;
 import java.security.cert.CertificateFactory;
 import java.security.cert.X509Certificate;
@@ -29,11 +28,19 @@ import java.util.stream.Collectors;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.tuple.Pair;
+import org.apache.hc.client5.http.classic.HttpClient;
+import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
+import org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;
+import org.apache.http.conn.HttpClientConnectionManager;
+import org.apache.http.conn.ssl.TrustAllStrategy;
+import org.apache.http.impl.client.HttpClients;
+import org.apache.http.ssl.SSLContexts;
 import org.apache.jena.riot.system.stream.StreamManager;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.http.ResponseEntity;
 import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 import org.springframework.stereotype.Component;
@@ -74,6 +81,11 @@ import info.weboftrust.ldsignatures.verifier.LdVerifier;
 import jakarta.annotation.PostConstruct;
 import lombok.extern.slf4j.Slf4j;
 
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
 
 /**
  * Implementation of the {@link VerificationService} interface.
@@ -131,15 +143,28 @@ public class VerificationServiceImpl implements VerificationService {
   //@Autowired
   private RestTemplate rest;
 
-  public VerificationServiceImpl() {
+  public VerificationServiceImpl() throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
     Security.addProvider(new BouncyCastleProvider());
     rest = restTemplate();
   }
 
-  private RestTemplate restTemplate() {
+  private RestTemplate restTemplate() throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
     HttpComponentsClientHttpRequestFactory factory = new HttpComponentsClientHttpRequestFactory();
     factory.setConnectTimeout(HTTP_TIMEOUT);
     factory.setConnectionRequestTimeout(HTTP_TIMEOUT);
+    factory.setHttpClient((HttpClient) HttpClients.custom()
+            .setConnectionManager(
+                    (HttpClientConnectionManager) PoolingHttpClientConnectionManagerBuilder.create()
+                            .setSSLSocketFactory(
+                                    SSLConnectionSocketFactoryBuilder.create()
+                                            .setSslContext(
+                                                    SSLContexts.custom()
+                                                            .loadTrustMaterial(null, TrustAllStrategy.INSTANCE)
+                                                            .build())
+                                            .setHostnameVerifier((s, sslSession) -> true)
+                                            .build())
+                            .build())
+            .build());
     return new RestTemplate(factory); 
   }
   
@@ -727,11 +752,13 @@ public class VerificationServiceImpl implements VerificationService {
       throw new VerificationException("Signatures error; PEM file does not contain public key");
     }
 
-    //if (!checkTrustAnchor(uri)) {
-    ResponseEntity<Map> resp = rest.postForEntity(trustAnchorAddr, Map.of("uri", uri), Map.class);
-	if (!resp.getStatusCode().is2xxSuccessful()) {
-      throw new VerificationException("Signatures error; Trust anchor is not set in the registry. URI: " + uri);
+    if (trustAnchorAddr != null && !trustAnchorAddr.isBlank()) {
+      ResponseEntity<Map> resp = rest.postForEntity(trustAnchorAddr, Map.of("uri", uri), Map.class);
+      if (!resp.getStatusCode().is2xxSuccessful()) {
+        throw new VerificationException("Signatures error; Trust anchor is not set in the registry. URI: " + uri);
+      }
     }
+
     Instant exp = relevant.getNotAfter().toInstant();
     log.debug("hasPEMTrustAnchorAndIsNotExpired.exit; returning: {}", exp);
     return exp;
@@ -892,3 +919,51 @@ public class VerificationServiceImpl implements VerificationService {
   }
 
 }
+
+
+@Configuration
+@Slf4j
+class SSLConfig {
+  /**
+   * Disables the SSL certificate checking for new instances of {@link HttpsURLConnection} This has been created to
+   * aid testing on a local box, not for use on production.
+   */
+
+  public SSLConfig(@Value("${federated-catalogue.ignore-ssl:false}") boolean ignoreSsl) {
+    if (ignoreSsl) {
+      disableSSLCertificateChecking();
+      log.info("Disabling SSL verification for web requests.");
+    }
+  }
+
+  private static void disableSSLCertificateChecking() {
+    TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() {
+      public X509Certificate[] getAcceptedIssuers() {
+        return null;
+      }
+
+      @Override
+      public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
+        // Not implemented
+      }
+
+      @Override
+      public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {
+        // Not implemented
+      }
+    }};
+
+    try {
+      SSLContext sc = SSLContext.getInstance("TLS");
+
+      sc.init(null, trustAllCerts, new java.security.SecureRandom());
+
+      HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
+      HttpsURLConnection.setDefaultHostnameVerifier((hostname, sslSession) -> true);
+    } catch (KeyManagementException e) {
+      e.printStackTrace();
+    } catch (NoSuchAlgorithmException e) {
+      e.printStackTrace();
+    }
+  }
+}
\ No newline at end of file
