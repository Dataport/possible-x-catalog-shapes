diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/DanubeTechClaimExtractor.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/DanubeTechClaimExtractor.java
index 033984ea..35bb2da1 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/DanubeTechClaimExtractor.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/DanubeTechClaimExtractor.java
@@ -54,6 +54,10 @@ public class DanubeTechClaimExtractor implements ClaimExtractor {
             
             for (Map<String, Object> csm: csms) {
                 cs = CredentialSubject.fromMap(csm);
+                if (cs.getType().equals("gx:compliance")) {
+                    log.info("Skipping claims from CS of type compliance");
+                    continue;
+                }
                 log.debug("extractClaims; CS claims: {}", cs.getClaims());
                 for (RdfNQuad nquad: cs.toDataset().toList()) {
                     log.debug("extractClaims; got NQuad: {}", nquad);
diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/TitaniumClaimExtractor.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/TitaniumClaimExtractor.java
index d65cb977..7cf3de41 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/TitaniumClaimExtractor.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/claims/TitaniumClaimExtractor.java
@@ -52,7 +52,23 @@ public class TitaniumClaimExtractor implements ClaimExtractor {
     private void addClaims(List<SdClaim> claims, JsonObject vc) throws JsonLdError {
         JsonArray css = vc.getJsonArray("https://www.w3.org/2018/credentials#credentialSubject");
         for (JsonValue cs: css) {
-            Document csDoc = JsonDocument.of(cs.asJsonObject());
+            JsonObject csObj = cs.asJsonObject();
+            log.info("Got CS: {}", csObj);
+            if (csObj.containsKey("type")) {
+                boolean isComplianceCredential = false;
+                try {
+                    for (JsonValue value : csObj.getJsonArray("type")) {
+                        isComplianceCredential |= value.toString().equals("gx:compliance");
+                    }
+                } catch (Exception e) {
+                        log.warn("Encountered error during VC type check: {}", e.getMessage());
+                }
+                if (isComplianceCredential) {
+                    log.info("Skipping claims from CS of type compliance");
+                    continue;
+                }
+            }
+            Document csDoc = JsonDocument.of(csObj);
             RdfDataset rdf = JsonLd.toRdf(csDoc).produceGeneralizedRdf(true).get();
             RdfGraph rdfGraph = rdf.getDefaultGraph();
             List<RdfTriple> triples = rdfGraph.toList();
