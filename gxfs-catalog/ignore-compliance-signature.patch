diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/LocalSignatureVerifier.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/LocalSignatureVerifier.java
index c9aa361a..2df4bc52 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/LocalSignatureVerifier.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/LocalSignatureVerifier.java
@@ -13,6 +13,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Set;
 
+import com.danubetech.verifiablecredentials.CredentialSubject;
 import org.apache.commons.io.IOUtils;
 import org.bouncycastle.jce.provider.BouncyCastleProvider;
 
@@ -89,6 +90,22 @@ public class LocalSignatureVerifier implements SignatureVerifier {
 	@Override
 	public boolean verify(JsonLDObject payload, LdProof proof, JWK jwk, String alg) {
       log.debug("verify; got jwk: {}, alg: {}", jwk, alg);
+
+	  boolean allCompliance = false;
+	  Object cs = payload.getJsonObject().get("credentialSubject");
+	  if (cs instanceof List<?> csObjectList) {
+		  List<CredentialSubject> csList = (List<CredentialSubject>) csObjectList;
+		  allCompliance = true;
+		  for (CredentialSubject innerCs : csList) {
+			  allCompliance &= innerCs.isType("gx:compliance");
+		  }
+	  }
+
+	  if (allCompliance) {
+		  log.info("received proof from compliance credential subject, ignoring signature...");
+		  return true;
+	  }
+
 	  PublicKeyVerifier<?> pkVerifier = PublicKeyVerifierFactory.publicKeyVerifierForJWK(jwk, alg);
 	  LdVerifier<?> verifier = new JsonWebSignature2020LdVerifier(pkVerifier);
 	  try {
diff --git a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/UniSignatureVerifier.java b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/UniSignatureVerifier.java
index f752f523..03bd743d 100644
--- a/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/UniSignatureVerifier.java
+++ b/fc-service-core/src/main/java/eu/xfsc/fc/core/service/verification/signature/UniSignatureVerifier.java
@@ -8,6 +8,7 @@ import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 
+import com.danubetech.verifiablecredentials.CredentialSubject;
 import org.springframework.beans.factory.annotation.Autowired;
 
 import com.danubetech.keyformats.crypto.PublicKeyVerifier;
@@ -92,6 +93,23 @@ public class UniSignatureVerifier implements SignatureVerifier {
 	@Override
 	public boolean verify(JsonLDObject payload, LdProof proof, JWK jwk, String alg) {
 		log.debug("verify.enter; alg: {}, jwk: {}", alg, jwk);
+
+		boolean allCompliance = false;
+		Object cs = payload.getJsonObject().get("credentialSubject");
+		if (cs instanceof List<?> csObjectList) {
+			List<CredentialSubject> csList = (List<CredentialSubject>) csObjectList;
+
+			allCompliance = true;
+			for (CredentialSubject innerCs : csList) {
+				allCompliance &= innerCs.isType("gx:compliance");
+			}
+		}
+
+		if (allCompliance) {
+			log.info("received proof from compliance credential subject, ignoring signature...");
+			return true;
+		}
+
 		LdVerifier<?> verifier = LdVerifierRegistry.getLdVerifierBySignatureSuiteTerm(proof.getType());
 		PublicKeyVerifier<?> pkVerifier = PublicKeyVerifierFactory.publicKeyVerifierForJWK(jwk, alg);
 		verifier.setVerifier(pkVerifier);
